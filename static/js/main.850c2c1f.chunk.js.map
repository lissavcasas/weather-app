{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","apiKey","App","state","e","preventDefault","target","elements","value","fetch","concat","then","res","json","data","cod","console","log","_this","setState","main","temp","sys","weather","message","components_Title","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.850c2c1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <p className=\"title-container__subtitle\">Descubre la temperatura, condición del clima y más</p>\r\n  </div>\r\n);\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    { props.city && props.country && <p className=\"weather__key\"> Ubicación:\r\n\t \t\t<span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n    </p> }\r\n    { props.temperature && <p className=\"weather__key\"> Temperatura:\r\n\t \t\t<span className=\"weather__value\"> {props.temperature}\t</span>\r\n    </p> }\r\n    { props.humidity && <p className=\"weather__key\"> Humedad:\r\n\t \t\t<span className=\"weather__value\"> {props.humidity} </span>\r\n    </p> }\r\n    { props.description && <p className=\"weather__key\"> Condiciones:\r\n\t \t\t<span className=\"weather__value\"> {props.description} </span>\r\n    </p> }\r\n    { props.error && <p className=\"weather__error\">{props.error}</p> }\r\n  </div>\r\n);\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport \"./App.css\";\n\nconst apiKey = '2950b618abc6031611a25c0e9f9eb34d';\n\nclass App extends Component {\n  state = {\n    temperature: null,\n    city: null,\n    country: null,\n    humidity: null,\n    description: null,\n    error: null\n  }\n\n  getWeather = (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`)\n      .then(res => res.json())\n      .then(data => {\n        if (city && country && data.cod !== '404') {\n          console.log(data);\n          this.setState({\n            temperature: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            humidity: data.main.humidity,\n            description: data.weather[0].description,\n            error: ''\n          });\n        } else if (city && country && data.message === \"city not found\" && data.cod === \"404\") {\n          this.setState({\n            error: 'Ciudad no encontrada'\n          })\n        } else {\n          this.setState({\n            error: 'Por favor, completa los campos'\n          });\n        }\n      })\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className=\"wrapper d-flex justify-content-center align-items-center\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-5 d-flex justify-content-center align-items-center text-center title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-sm-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}